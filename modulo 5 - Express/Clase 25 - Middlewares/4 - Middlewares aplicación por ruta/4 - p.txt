Agregando middleware en la ruta "subir-archivo"

A diferencia de los middleware de aplicación que se ejecutan para todas las rutas, los middleware de ruta permiten aplicar un middleware en una o varias rutas seleccionadas. Un ejemplo de esto es el middleware de Multer, que se agrega solo a las rutas que se van a encargar de subir archivos. (Recordemos que Multer es un paquete de Node.js que permite la carga de archivos en el servidor.)

Para este ejemplo ya tenemos lista la configuración de Multer, pero nos falta agregar el middleware en la ruta "subir-archivo".

Para ello, vamos a tener que pasar como segundo parámetro de la ruta "subir-archivo" el middleware upload.any().
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const express = require('express');
const router = express.Router();
const multer = require('multer');

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, '/tmp/my-uploads')
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now())
  }
});
 
const upload = multer({ storage: storage });

router.post('/subir-archivo', upload.any(),fileController.upload); 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Contando visitas

Imaginemos que tenemos un controlador llamado "estadisticasController" que tiene un método "contarVisita". Este médoto recibe un request y suma, en nuestra base de datos, una nueva visita a la URL del request.
Ahora bien, nos gustaría poder contar las visitas a nuestro sitio, pero no de todas las URL. Por ejemplo, no queremos contar visitas a las rutas que se acceden por post; y a algunas rutas get, como login y panel de usuario, es probable que tampoco.

Nuestro objetivo va a ser crear una función llamada visitasMiddleware que reciba como parámetros req, res y next. Dentro de esta función vamos a ejecutar el método contarVisita del controlador estadisticasController, y vamos a pasarle el objeto request como parámetro del método: estadisticasController.contarVisita(req). Al final de nuestra función vamos a ejecutar el callback next().

Finalmente vamos a agregar nuestra función visitasMiddleware como segundo parámetro de la ruta '/home' que ya se encuentra definida.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const express = require('express');
const router = express.Router();
const homeController = require('../controllers/homeController');
const estadisticasController = require('../controllers/estadisticasController');

let visitasMiddleware = (req, res, next) =>{
   estadisticasController.contarVisita(req)
   next()
}

router.get('/home', visitasMiddleware, homeController.index);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Redirigiendo a la HOME

Se planea dar de baja a algunas rutas en nuestro sitio. Para eso vamos a desarrollar una funcionalidad en la cual el usuario, al ingresar a una de las rutas planeadas para dar de baja, sea redirigido a la Home.

Para lograr el desarrollo de la funcionalidad hay que:

1) Definir la función redirigir que nos va a servir como middleware. Recordemos que podemos definir un middleware como una función que recibe los parámetros req, res, next.

2) Dentro de nuestra función vamos a llamar al método redirect  del objeto response y vamos a hacer una redirección hacia la URL '/'. Para este caso particular, no es necesario llamar al callback next dado que la idea de este redirect es cortar la ejecución de los posibles subsiguientes middlewares.

3) Agregar la función redirigir  como segundo parámetro de la ruta '/ruta-en-desuso'.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const express = require('express');
const router = express.Router();
const OldController = require('../controllers/OldController');

let redirigir  = (req, res, next)=>{
    res.redirect('/')
}

router.get('/ruta-en-desuso', redirigir, OldController.index); 